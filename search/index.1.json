[{"content":"Summary.\nContent.\n","date":"November 23, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/blog/new-post/","series":[{"title":"syntax","url":"/series/syntax/"}],"smallImg":"","tags":[{"title":"bash","url":"/tags/bash/"},{"title":"python","url":"/tags/python/"}],"timestamp":1669250774,"title":"New Post"},{"content":"A showcase of syntax highlighting with this theme.\nSynxtax test¬ß # Prints all batteries, their percentage remaining and an emoji corresponding # to charge status (üîå for plugged up, üîã for discharging on battery, etc.). case $BLOCK_BUTTON in 3) notify-send \u0026#34;ÔÑâ Battery module\u0026#34; \u0026#34;ÔÑâ: discharging üõë: not charging ‚ôª: stagnant charge üîå: charging ‚ö°: charged ‚ùó: battery very low! - Scroll to change adjust xbacklight.\u0026#34; ;; 4) xbacklight -inc 10 ;; 5) xbacklight -dec 10 ;; 6) \u0026#34;$TERMINAL\u0026#34; -e \u0026#34;$EDITOR\u0026#34; \u0026#34;$0\u0026#34; ;; esac # Loop through all attached batteries and format the info for battery in /sys/class/power_supply/BAT?*; do # If non-first battery, print a space separator. [ -n \u0026#34;${capacity+x}\u0026#34; ] \u0026amp;\u0026amp; printf \u0026#34; \u0026#34; # Sets up the status and capacity case \u0026#34;$(cat \u0026#34;$battery/status\u0026#34; 2\u0026gt;\u0026amp;1)\u0026#34; in \u0026#34;Full\u0026#34;) status=\u0026#34;‚ö°\u0026#34; ;; \u0026#34;Discharging\u0026#34;) status=\u0026#34;ÔÑâ \u0026#34; ;; \u0026#34;Charging\u0026#34;) status=\u0026#34;üîå \u0026#34; ;; \u0026#34;Not charging\u0026#34;) status=\u0026#34;üõë\u0026#34; ;; \u0026#34;Unknown\u0026#34;) status=\u0026#34;‚ôªÔ∏è \u0026#34; ;; *) exit 1 ;; esac capacity=\u0026#34;$(cat \u0026#34;$battery/capacity\u0026#34; 2\u0026gt;\u0026amp;1)\u0026#34; # Will make a warn variable if discharging and low [ \u0026#34;$status\u0026#34; = \u0026#34;ÔÑâ\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$capacity\u0026#34; -le 30 ] \u0026amp;\u0026amp; warn=\u0026#34;‚ùó\u0026#34; # Prints the info printf \u0026#34;%s%s%d%%\u0026#34; \u0026#34;$status\u0026#34; \u0026#34;$warn\u0026#34; \u0026#34;$capacity\u0026#34;; unset warn done \u0026amp;\u0026amp; printf \u0026#34;\\\\n\u0026#34; mermaid¬ß %%{init: {\u0026#39;theme\u0026#39;: \u0026#39;forest\u0026#39;, \u0026#34;flowchart\u0026#34; : { \u0026#34;curve\u0026#34; : \u0026#34;basis\u0026#34; } } }%% graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; stateDiagram direction LR [*] --\u0026gt; A A --\u0026gt; B B --\u0026gt; C state B { direction LR a --\u0026gt; b } B --\u0026gt; D gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h fib 0 = 0 fib 1 = 1 fib n = fib (n-1) + fib (n-2) def fib(n): a, b = 0, 1 while a \u0026lt; n: print(a, end=\u0026#39; \u0026#39;) a, b = b, a+b print() fib(1000) sudo apt install neovim -y Download stow and git.\nClone into your $HOME directory or ~.\nYou\u0026rsquo;ll also need a nerd font to view icons with my set up.\ngit clone https://github.com/cmpi66/dotfiles.git ~ Run stow to symlink everything or select any config files you want.\nstow */ # this gets everything; the \u0026#39;/\u0026#39; ignores the README stow fish # Only my fish config require(\u0026#34;zk\u0026#34;).setup({ -- can be \u0026#34;telescope\u0026#34;, \u0026#34;fzf\u0026#34; or \u0026#34;select\u0026#34; (`vim.ui.select`) -- it\u0026#39;s recommended to use \u0026#34;telescope\u0026#34; or \u0026#34;fzf\u0026#34; picker = \u0026#34;select\u0026#34;, lsp = { -- `config` is passed to `vim.lsp.start_client(config)` config = { cmd = { \u0026#34;zk\u0026#34;, \u0026#34;lsp\u0026#34; }, name = \u0026#34;zk\u0026#34;, -- on_attach = ... -- etc, see `:h vim.lsp.start_client()` }, -- automatically attach buffers in a zk notebook that match the given filetypes auto_attach = { enabled = true, filetypes = { \u0026#34;markdown\u0026#34; }, }, }, }) fn main() { println!(\u0026#34;Hello, world!\u0026#34;); let x = 15; } #!/bin/sh # Requires ffmpeg [ ! -f \u0026#34;$2\u0026#34; ] \u0026amp;\u0026amp; printf \u0026#34;The first file should be the audio, the second should be the timecodes.\\\\n\u0026#34; \u0026amp;\u0026amp; exit echo \u0026#34;Enter the album/book title:\u0026#34;; read -r booktitle echo \u0026#34;Enter the artist/author:\u0026#34;; read -r author echo \u0026#34;Enter the publication year:\u0026#34;; read -r year inputaudio=\u0026#34;$1\u0026#34; ext=\u0026#34;${1#*.}\u0026#34; # Get a safe file name from the book. escbook=\u0026#34;$(echo \u0026#34;$booktitle\u0026#34; | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d \u0026#39;[:punct:]\u0026#39; | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; | tr \u0026#39; \u0026#39; \u0026#39;-\u0026#39; | sed \u0026#34;s/-\\+/-/g;s/\\(^-\\|-\\$\\)//g\u0026#34;)\u0026#34; ! mkdir -p \u0026#34;$escbook\u0026#34; \u0026amp;\u0026amp; echo \u0026#34;Do you have write access in this directory?\u0026#34; \u0026amp;\u0026amp; exit 1 # Get the total number of tracks from the number of lines. total=\u0026#34;$(wc -l \u0026lt; \u0026#34;$2\u0026#34;)\u0026#34; cmd=\u0026#34;ffmpeg -i \\\u0026#34;$inputaudio\\\u0026#34; -nostdin -y\u0026#34; while read -r x; do end=\u0026#34;$(echo \u0026#34;$x\u0026#34; | cut -d\u0026#39;\t\u0026#39; -f1)\u0026#34; file=\u0026#34;$escbook/$(printf \u0026#34;%.2d\u0026#34; \u0026#34;$track\u0026#34;)-$esctitle.$ext\u0026#34; if [ -n \u0026#34;$start\u0026#34; ]; then cmd=\u0026#34;$cmd -metadata artist=\\\u0026#34;$author\\\u0026#34; -metadata title=\\\u0026#34;$title\\\u0026#34; -metadata album=\\\u0026#34;$booktitle\\\u0026#34; -metadata year=\\\u0026#34;$year\\\u0026#34; -metadata track=\\\u0026#34;$track\\\u0026#34; -metadata total=\\\u0026#34;$total\\\u0026#34; -ss \\\u0026#34;$start\\\u0026#34; -to \\\u0026#34;$end\\\u0026#34; -vn -c:a copy \\\u0026#34;$file\\\u0026#34; \u0026#34; fi title=\u0026#34;$(echo \u0026#34;$x\u0026#34; | cut -d\u0026#39;\t\u0026#39; -f2-)\u0026#34; esctitle=\u0026#34;$(echo \u0026#34;$title\u0026#34; | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d \u0026#39;[:punct:]\u0026#39; | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; | tr \u0026#39; \u0026#39; \u0026#39;-\u0026#39; | sed \u0026#34;s/-\\+/-/g;s/\\(^-\\|-\\$\\)//g\u0026#34;)\u0026#34; track=\u0026#34;$((track+1))\u0026#34; start=\u0026#34;$end\u0026#34; done \u0026lt; \u0026#34;$2\u0026#34; # Last track must be added out of the loop. file=\u0026#34;$escbook/$(printf \u0026#34;%.2d\u0026#34; \u0026#34;$track\u0026#34;)-$esctitle.$ext\u0026#34; cmd=\u0026#34;$cmd -metadata artist=\\\u0026#34;$author\\\u0026#34; -metadata title=\\\u0026#34;$title\\\u0026#34; -metadata album=\\\u0026#34;$booktitle\\\u0026#34; -metadata year=\\\u0026#34;$year\\\u0026#34; -metadata track=\\\u0026#34;$track\\\u0026#34; -ss \\\u0026#34;$start\\\u0026#34; -vn -c copy \\\u0026#34;$file\\\u0026#34;\u0026#34; eval \u0026#34;$cmd\u0026#34; ","date":"November 23, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/blog/test/","series":[{"title":"syntax","url":"/series/syntax/"}],"smallImg":"","tags":[{"title":"bash","url":"/tags/bash/"},{"title":"haskell","url":"/tags/haskell/"},{"title":"linux","url":"/tags/linux/"}],"timestamp":1669250356,"title":"Test"},{"content":"This guide show you how to install on Arch Linux.\n","date":"September 6, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/docs/installation/linux/archlinux/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"Arch Linux","url":"/tags/arch-linux/"}],"timestamp":1662475343,"title":"Install on Arch Linux"},{"content":"A fast, responsive and feature-rich Hugo theme for blog and documentations site.\n","date":"September 6, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/docs/introduction/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[],"timestamp":1662475343,"title":"Introduction"},{"content":"This guide show you how to install on Ubuntu.\n","date":"September 6, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/docs/installation/linux/ubuntu/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"linux","url":"/tags/linux/"},{"title":"Ubuntu","url":"/tags/ubuntu/"}],"timestamp":1662475343,"title":"Install on Ubuntu"},{"content":"This guide show you how to install on Windows.\n","date":"September 6, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/docs/installation/windows/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Windows","url":"/tags/windows/"}],"timestamp":1662475343,"title":"Install on Windows"},{"content":"See also README.md.\n","date":"April 17, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/blog/readme/","series":[],"smallImg":"","tags":[{"title":"README","url":"/tags/readme/"}],"timestamp":1650184529,"title":"README"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremely fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","date":"February 28, 2019","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":1551312000,"title":"About"},{"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Contact Us"},{"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"}]
